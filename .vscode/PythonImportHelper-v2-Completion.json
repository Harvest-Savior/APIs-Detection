[
    {
        "label": "Connector",
        "importPath": "google.cloud.sql.connector",
        "description": "google.cloud.sql.connector",
        "isExtraImport": true,
        "detail": "google.cloud.sql.connector",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "create_connection_pool",
        "importPath": "connect",
        "description": "connect",
        "isExtraImport": true,
        "detail": "connect",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "getconn",
        "kind": 2,
        "importPath": "connect",
        "description": "connect",
        "peekOfCode": "def getconn():\n    conn = connector.connect(\n        \"harvestsavior-425512:asia-southeast2:harvestsavior\",\n        \"pymysql\",\n        user=\"root\",\n        password=\"hv12345\",\n        db=\"hs_db\",\n    )\n    return conn\ndef create_connection_pool():",
        "detail": "connect",
        "documentation": {}
    },
    {
        "label": "create_connection_pool",
        "kind": 2,
        "importPath": "connect",
        "description": "connect",
        "peekOfCode": "def create_connection_pool():\n    return sqlalchemy.create_engine(\n        \"mysql+pymysql://\",\n        creator=getconn,\n        pool_size=5,\n        max_overflow=10  \n    )",
        "detail": "connect",
        "documentation": {}
    },
    {
        "label": "connector",
        "kind": 5,
        "importPath": "connect",
        "description": "connect",
        "peekOfCode": "connector = Connector()\ndef getconn():\n    conn = connector.connect(\n        \"harvestsavior-425512:asia-southeast2:harvestsavior\",\n        \"pymysql\",\n        user=\"root\",\n        password=\"hv12345\",\n        db=\"hs_db\",\n    )\n    return conn",
        "detail": "connect",
        "documentation": {}
    },
    {
        "label": "process_image",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def process_image(image_bytes):\n    try:\n        image = Image.open(BytesIO(image_bytes))\n        if image.mode != 'RGB':\n            image = image.convert('RGB')\n        image = image.resize((150, 150))\n        image = np.array(image) / 255.0\n        return image\n    except Exception as e:\n        logger.error(f\"Error processing image: {e}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "fetch_disease_info_by_disease_name",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def fetch_disease_info_by_disease_name(disease_name):\n    with pool.connect() as conn:\n        sql_statement = text(\n            \"SELECT p.plant_name, di.disease_name, di.solution, di.source, di.cause, di.prevention_method \"\n            \"FROM plants p \"\n            \"JOIN disease_info di ON p.plant_id = di.plant_id \"\n            \"WHERE di.disease_name = :disease_name;\"\n        )\n        sql_statement = sql_statement.bindparams(disease_name=disease_name)\n        result = conn.execute(sql_statement)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def index():\n    return Response(content=\"API WORKING\", status_code=200)\n# Endpoint for image prediction\n@app.post(\"/predict_image\")\nasync def predict_image(photo: UploadFile = File(...)):\n    try:\n        logger.info(\"Received image for prediction.\")\n        if photo.content_type not in [\"image/jpeg\", \"image/png\"]:\n            logger.error(\"File is not an image.\")\n            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"File is Not an Image\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_history",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_history():\n    logger.info(\"Fetching prediction history.\")\n    return JSONResponse(content={\"history\": prediction_history}, status_code=200)\n# Endpoint to get disease information by plant name\n@app.get(\"/disease_info/{plant_name}\")\ndef get_disease_info(plant_name: str):\n    try:\n        logger.info(f\"Fetching disease info for plant: {plant_name}\")\n        disease_info = fetch_disease_info_by_disease_name(plant_name)\n        if not disease_info:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_disease_info",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_disease_info(plant_name: str):\n    try:\n        logger.info(f\"Fetching disease info for plant: {plant_name}\")\n        disease_info = fetch_disease_info_by_disease_name(plant_name)\n        if not disease_info:\n            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Plant or disease info not found\")\n        return JSONResponse(content=disease_info, status_code=200)\n    except HTTPException as http_err:\n        logger.error(f\"HTTP exception: {http_err.detail}\")\n        raise http_err",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Load the model\nlogger.info(\"Loading the model...\")\nmodel = tf.keras.models.load_model('./best_model.h5')\nlogger.info(\"Model loaded successfully.\")\napp = FastAPI(title=\"ML Try FastAPI\")\npool = create_connection_pool()\n# Define class names\nclass_names = [\n    'Cabai Sehat', 'Keriting Daun pada Cabai', 'Bercak Daun pada Cabai',",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "model = tf.keras.models.load_model('./best_model.h5')\nlogger.info(\"Model loaded successfully.\")\napp = FastAPI(title=\"ML Try FastAPI\")\npool = create_connection_pool()\n# Define class names\nclass_names = [\n    'Cabai Sehat', 'Keriting Daun pada Cabai', 'Bercak Daun pada Cabai',\n    'Kutu Putih pada Cabai', 'Virus Kuning pada Cabai',\n    'Bercak Bakteri pada Tomat', 'Hawar Daun pada Tomat', 'Tomat Sehat',\n    'Busuk Daun pada Tomat', 'Jamur Daun pada Tomat',",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(title=\"ML Try FastAPI\")\npool = create_connection_pool()\n# Define class names\nclass_names = [\n    'Cabai Sehat', 'Keriting Daun pada Cabai', 'Bercak Daun pada Cabai',\n    'Kutu Putih pada Cabai', 'Virus Kuning pada Cabai',\n    'Bercak Bakteri pada Tomat', 'Hawar Daun pada Tomat', 'Tomat Sehat',\n    'Busuk Daun pada Tomat', 'Jamur Daun pada Tomat',\n    'Virus Mosaik pada Tomat', 'Bercak Daun Septoria pada Tomat',\n    'Tungau Laba-Laba pada Tomat', 'Bercak Daun pada Tomat',",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "pool",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "pool = create_connection_pool()\n# Define class names\nclass_names = [\n    'Cabai Sehat', 'Keriting Daun pada Cabai', 'Bercak Daun pada Cabai',\n    'Kutu Putih pada Cabai', 'Virus Kuning pada Cabai',\n    'Bercak Bakteri pada Tomat', 'Hawar Daun pada Tomat', 'Tomat Sehat',\n    'Busuk Daun pada Tomat', 'Jamur Daun pada Tomat',\n    'Virus Mosaik pada Tomat', 'Bercak Daun Septoria pada Tomat',\n    'Tungau Laba-Laba pada Tomat', 'Bercak Daun pada Tomat',\n    'Virus Kuning pada Tomat'",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "class_names",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class_names = [\n    'Cabai Sehat', 'Keriting Daun pada Cabai', 'Bercak Daun pada Cabai',\n    'Kutu Putih pada Cabai', 'Virus Kuning pada Cabai',\n    'Bercak Bakteri pada Tomat', 'Hawar Daun pada Tomat', 'Tomat Sehat',\n    'Busuk Daun pada Tomat', 'Jamur Daun pada Tomat',\n    'Virus Mosaik pada Tomat', 'Bercak Daun Septoria pada Tomat',\n    'Tungau Laba-Laba pada Tomat', 'Bercak Daun pada Tomat',\n    'Virus Kuning pada Tomat'\n]\n# In-memory storage for prediction history",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "prediction_history",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "prediction_history = []\n# Image processing function\ndef process_image(image_bytes):\n    try:\n        image = Image.open(BytesIO(image_bytes))\n        if image.mode != 'RGB':\n            image = image.convert('RGB')\n        image = image.resize((150, 150))\n        image = np.array(image) / 255.0\n        return image",
        "detail": "main",
        "documentation": {}
    }
]